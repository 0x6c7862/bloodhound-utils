#!/usr/bin/env bash
declare -r version='2.0.0'
declare -r bloodhound_version="${BLOODHOUND_VERSION-1.3}"
declare -r neo4j_version="3.1"
export LC_ALL='C'

bail () {
	declare -r message="${@}"

	# Print message to stderr and die with error
	printf 'bloodhound-server: %s\n' "${message[@]}" 1>&2
	exit 1
}

halp () {
	declare ret="${1}"
	shift 1
	declare message="${@}"

	cat 1>&2 <<EOF
${message[@]}
Usage: bloodhound-server [OPTIONS...] [database]
	-h	Display this help message.
	-v	Display version information and exit.

	[database]	The BloodHound neo4j database directory. Will be created if
			not already present
EOF
	exit "${ret}"
}

version () {
	cat <<EOF
bloodhound-server ${version} (https://github.com/0x6c7862/bloodhound-utils)

Written by @lxb <https://github.com/0x6c7862>.
BloodHound is written by Veris Group's Adaptive Threat Division <https://github.com/BloodHoundAD/BloodHound>.
BloodHound is GPLv3 software (See <https://github.com/BloodHoundAD/BloodHound/blob/master/LICENSE.md> for more information).
EOF
}

create_config () {
	# Create new config directory
	declare -r tmp="$(mktemp -d)"
	mkdir "${tmp}/conf"

	# Config ripped from `neo4j:3.1 dump-config` with the addition of
	# `default_listen_address`
	cat >"${tmp}/conf/neo4j.conf" <<'EOF'
dbms.directories.import=import
dbms.connectors.default_listen_address=0.0.0.0
dbms.connector.bolt.enabled=true
dbms.connector.http.enabled=true
dbms.connector.https.enabled=true
dbms.jvm.additional=-XX:+UseG1GC
dbms.jvm.additional=-XX:-OmitStackTraceInFastThrow
dbms.jvm.additional=-XX:+AlwaysPreTouch
dbms.jvm.additional=-XX:+UnlockExperimentalVMOptions
dbms.jvm.additional=-XX:+TrustFinalNonStaticFields
dbms.jvm.additional=-XX:+DisableExplicitGC
dbms.jvm.additional=-Djdk.tls.ephemeralDHKeySize=2048
dbms.windows_service_name=neo4j
dbms.jvm.additional=-Dunsupported.dbms.udc.source=tarball
EOF

	# Return tmpdir
	echo "${tmp}"
}

download_database () {
	# Create new working directory
	declare -r tmp="$(mktemp -d)"
	pushd "${tmp}" &>/dev/null

	# Pull down the latest example database via a sparse checkout of the
	# BloodHound repository
	printf '[+] Downloading BloodHound database\n'
	git init &>/dev/null
	git remote add origin https://github.com/BloodHoundAD/BloodHound &>/dev/null
	echo BloodHoundExampleDB.graphdb >.git/info/sparse-checkout
	git -c core.sparseCheckout=true pull --depth=1 origin "tags/${bloodhound_version}" &>/dev/null
	if [[ "${?}" != 0 ]]; then
		printf '[-] Failed downloading BloodHound database\n'
		return
	fi

	# Remove credentials
	rm -rf BloodHoundExampleDB.graphdb/data/dbms/auth

	# Create new BloodHound database
	popd &>/dev/null
	mkdir -p "${database}/.."
	if [[ "${?}" != 0 ]]; then
		printf '[-] Failed creating BloodHound database\n'
		return
	fi

	# NOTE: This appears destructive, but we shouldn't reach this function if
	#       the directory previously existed
	rm -rf "${database}"
	mv "${tmp}/BloodHoundExampleDB.graphdb" "${database}"
	if [[ "${?}" != 0 ]]; then
		printf '[-] Failed creating BloodHound database\n'
		return
	fi

	# Cleanup
	rm -rf "${tmp}"
}

main () {
	# Check options
	while getopts "hp:v" opt; do
		case "${opt}" in
		h)
			halp 0 "$(version)"
			;;
		p)
			password="${OPTARG}"
			;;
		v)
			version
			exit 0
			;;
		\?)
			halp 1 "$(version)"
		esac
	done
	shift $(( OPTIND-1 ))

	# Check that Docker is available by pulling down neo4j (since we need it
	# later anyway)
	docker image ls | grep -E "^neo4j[[:space:]]+${neo4j_version}" &>/dev/null
	declare -a rets=(${PIPESTATUS[@]})
	[[ "${rets[0]}" != "0" ]] && bail "docker failed. Is Docker installed?"
	if [[ "${rets[1]}" != "0" ]]; then
		# Start pulling neo4j down in the background
		printf '[+] Downloading neo4j\n'
		docker image pull "neo4j:${neo4j_version}" & &>/dev/null
	fi

	# Check database argument
	declare -r database="${1}"
	if [[ -z "${database}" ]]; then
		# Finish potentially pulling down neo4j and die
		wait
		halp 1 "bloodhound-server: missing database argument"
	fi

	# Ensure database exists
	if [[ -d "${database}" ]]; then
		if [[ ! -f "${database}/neostore.id" ]]; then
			# Finish potentially pulling down neo4j and die
			wait
			bail 1 "unknown database. Is ${database} a valid BloodHound database?"
		fi
	else
		download_database "${database}" &
	fi

	# Join on downloads and double check database exists
	wait &>/dev/null
	if [[ ! -d "${database}" ]]; then
		exit 1
	fi

	case "${OSTYPE}" in
	linux-gnu)
		declare -r database_path="$(readlink -e "${database}")"
		;;
	darwin*)
		# Fallback to probably-fine-but-less-than-ideal value on OSX due to
		# lack of readlink flags
		declare -r database_path="${PWD}/${database}"
		;;
	*)
		bail "unsupported operating system"
		;;
	esac

	# Start the container
	printf '[+] Launching neo4j\n'
	declare -r container_config="$(create_config)"
	declare -r container="$(docker container run -d \
		--publish=7473:7473 --publish=7474:7474 --publish=7687:7687 \
		-v "${container_config}/conf:/conf" \
		-v "${database_path}:/var/lib/neo4j/data/databases/graph.db" \
		"neo4j:${neo4j_version}")"

	# Change the password
	if [[ ! -f "${database_path}/data/dbms/auth" ]]; then
		# Wait for remote API
		printf '[+] Changing password\n'
		until docker container logs "${container}" | grep 'Remote interface available' &>/dev/null; do :; done

		# Set to an intermediate password to allow setting password as "neo4j"
		declare -r rand="$(cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w 8 | head -n 1)"
		curl -s -H "Content-Type: application/json" \
			-d "{\"password\":\"${rand}\"}" \
			-u neo4j:neo4j \
			http://localhost:7474/user/neo4j/password

		# Set password
		curl -s -H "Content-Type: application/json" \
			-d "{\"password\":\"${password:-BloodHound}\"}" \
			-u "neo4j:${rand}" \
			http://localhost:7474/user/neo4j/password
	else
		printf '[-] Unable to set password\n'
	fi

	# Attach to the container
	docker container logs "${container}"
	docker container attach "${container}"

	# Cleanup
	docker container rm "${container}" >/dev/null
	rm -r "${container_config}"
}

main "${@}"
